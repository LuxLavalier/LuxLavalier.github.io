{
  "name": "Eye of Sauron",
  "id": "rYGzPKSFYTpESDKzu",
  "sources": {
    "main": "/* \nFiery Eye of Sauron (as seen in The Lord of the Rings Movies).\n\n2022 Ben Hencke (wizard)\n*/\n\nvar rgbGradient = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nsetPalette(rgbGradient)\nexport var aDensity = 7, rDensity = 1, dilation = 1.1, slitness = 4\n\nexport function sliderAngularDensity(v) {\n  aDensity = 2 + round(v * 16)\n}\n\nexport function sliderRadialDensity(v) {\n  rDensity = .1 + (v * 2)\n}\n\nexport function sliderDialation(v) {\n  dilation = 0.7 + v \n}\n\nexport function sliderSlitness(v) {\n  slitness = 1 + v*4\n}\n\nexport function beforeRender(delta) {\n  //perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time()\n  //and happens to give us over 7.6 minutes of unique noise\n  morphTime = time(7) * 256\n  rTime = time(3) * 256\n\n  resetTransform()\n  s = 3\n  translate(-.5, -.5)\n  scale(s,s * 1.4)\n  setPerlinWrap(aDensity, 0, 0)\n}\nexport function render2D(index, x, y) {\n  //calc radial coordinates\n  r = hypot(x, y)\n  a = (atan2(y, x) + PI) / PI2\n  \n  //use ridge noise for wispy fire tendrils. animate outward, with a slow morph\n  v = perlinRidge(a * aDensity,r * rDensity - rTime , morphTime, 2, .5, 1.1, 3)\n  \n  //fade out in an oval shape, more sharply towards the edge\n  r2 = clamp((s-1)-r, 0, 1)\n  r2 = 2-r2*r2\n  v = v*min((2-r2), 1)\n  \n  //darken the middle for an evil slit pupil\n  v = v - max(0,dilation - hypot(x*slitness, y))\n  \n  v = min(v,1) //keep palette from wrapping\n  paint(v, v)\n}"
  },
  "preview": "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"
}