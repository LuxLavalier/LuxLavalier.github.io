{
  "name": "Perlin fire",
  "id": "nqTQrm9MMG5Ge3WSg",
  "sources": {
    "main": "/* \nDemonstration of Perlin noise functions to generate fire \nThe first mode shows Perlin noise scaled to 0-1.\nThe second shows a fractal ridge function, creating fire tendrils.\nThe third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\nThe fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n2022 Ben Hencke (wizard)\n*/\n\nvar rgbGradient = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nsetPalette(rgbGradient)\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\nexport var mode = 1, fireScale = 3, risingSpeed = 1, morphSpeed = 1\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function beforeRender(delta) {\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime ) \n  \n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}"
  },
  "preview": "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"
}